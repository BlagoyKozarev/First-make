import { useState, useCallback, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Upload, FileText, CheckCircle, AlertCircle, X } from 'lucide-react';
import {
  uploadKssFiles,
  uploadUkazaniaFiles,
  uploadPriceBaseFiles,
  uploadTemplateFile,
  getProject,
} from '../lib/api';

interface UploadZoneProps {
  title: string;
  description: string;
  accept: string;
  maxFiles: number;
  files: File[];
  onFilesChange: (files: File[]) => void;
  icon: string;
}

function UploadZone({ title, description, accept, maxFiles, files, onFilesChange, icon }: UploadZoneProps) {
  const [isDragging, setIsDragging] = useState(false);

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);

    const droppedFiles = Array.from(e.dataTransfer.files);
    const newFiles = [...files, ...droppedFiles].slice(0, maxFiles);
    onFilesChange(newFiles);
  }, [files, maxFiles, onFilesChange]);

  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = Array.from(e.target.files || []);
    const newFiles = [...files, ...selectedFiles].slice(0, maxFiles);
    onFilesChange(newFiles);
  }, [files, maxFiles, onFilesChange]);

  const removeFile = (index: number) => {
    const newFiles = files.filter((_, i) => i !== index);
    onFilesChange(newFiles);
  };

  const inputId = `file-input-${title.replace(/\s+/g, '-')}`;

  return (
    <div className="bg-card border rounded-lg p-4">
      <div className="flex items-start gap-3 mb-3">
        <span className="text-2xl">{icon}</span>
        <div className="flex-1">
          <h3 className="font-semibold">{title}</h3>
          <p className="text-sm text-muted-foreground">{description}</p>
          <p className="text-xs text-muted-foreground mt-1">
            –ú–∞–∫—Å–∏–º—É–º: {maxFiles} {maxFiles === 1 ? '—Ñ–∞–π–ª' : '—Ñ–∞–π–ª–∞'}
          </p>
        </div>
      </div>

      <div
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        className={`
          border-2 border-dashed rounded-md p-6 text-center transition-colors
          ${isDragging ? 'border-primary bg-primary/5' : 'border-muted-foreground/25'}
          ${files.length >= maxFiles ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
        `}
      >
        {files.length < maxFiles ? (
          <div className="space-y-2">
            <Upload className="w-8 h-8 mx-auto text-muted-foreground" />
            <p className="text-sm">–ü—É—Å–Ω–µ—Ç–µ —Ñ–∞–π–ª–æ–≤–µ —Ç—É–∫</p>
            <div>
              <input
                type="file"
                id={inputId}
                className="hidden"
                accept={accept}
                multiple={maxFiles > 1}
                onChange={handleFileSelect}
                disabled={files.length >= maxFiles}
              />
              <label htmlFor={inputId}>
                <span className="text-xs text-primary hover:underline cursor-pointer">
                  –∏–ª–∏ –∏–∑–±–µ—Ä–µ—Ç–µ —Ñ–∞–π–ª–æ–≤–µ
                </span>
              </label>
            </div>
          </div>
        ) : (
          <p className="text-sm text-muted-foreground">–î–æ—Å—Ç–∏–≥–Ω–∞—Ç –º–∞–∫—Å–∏–º–∞–ª–µ–Ω –±—Ä–æ–π —Ñ–∞–π–ª–æ–≤–µ</p>
        )}
      </div>

      {/* File List */}
      {files.length > 0 && (
        <div className="mt-3 space-y-2">
          {files.map((file, index) => (
            <div
              key={index}
              className="flex items-center gap-2 bg-muted/50 px-3 py-2 rounded-md text-sm"
            >
              <FileText className="w-4 h-4 text-muted-foreground flex-shrink-0" />
              <span className="flex-1 truncate">{file.name}</span>
              <span className="text-xs text-muted-foreground">
                {(file.size / 1024 / 1024).toFixed(2)} MB
              </span>
              <button
                onClick={() => removeFile(index)}
                className="text-destructive hover:bg-destructive/10 p-1 rounded"
              >
                <X className="w-4 h-4" />
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default function UploadPage() {
  const navigate = useNavigate();
  const [projectId, setProjectId] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [uploadProgress, setUploadProgress] = useState<string>('');

  // File states
  const [kssFiles, setKssFiles] = useState<File[]>([]);
  const [ukazaniaFiles, setUkazaniaFiles] = useState<File[]>([]);
  const [priceBaseFiles, setPriceBaseFiles] = useState<File[]>([]);
  const [templateFile, setTemplateFile] = useState<File[]>([]);

  useEffect(() => {
    const storedProjectId = sessionStorage.getItem('currentProjectId');
    if (!storedProjectId) {
      navigate('/');
    } else {
      setProjectId(storedProjectId);
    }
  }, [navigate]);

  const handleUploadAll = async () => {
    if (!projectId) return;

    // Validation
    if (kssFiles.length === 0) {
      setError('–ú–æ–ª—è –∫–∞—á–µ—Ç–µ –ø–æ–Ω–µ 1 –ö–°–° —Ñ–∞–π–ª');
      return;
    }

    setIsUploading(true);
    setError(null);

    try {
      // Upload –ö–°–° files
      if (kssFiles.length > 0) {
        setUploadProgress('–ö–∞—á–≤–∞–Ω–µ –Ω–∞ –ö–°–° —Ñ–∞–π–ª–æ–≤–µ...');
        await uploadKssFiles(projectId, kssFiles);
      }

      // Upload –£–∫–∞–∑–∞–Ω–∏—è files
      if (ukazaniaFiles.length > 0) {
        setUploadProgress('–ö–∞—á–≤–∞–Ω–µ –Ω–∞ –£–∫–∞–∑–∞–Ω–∏—è...');
        await uploadUkazaniaFiles(projectId, ukazaniaFiles);
      }

      // Upload Price Base files
      if (priceBaseFiles.length > 0) {
        setUploadProgress('–ö–∞—á–≤–∞–Ω–µ –Ω–∞ –¶–µ–Ω–æ–≤–∞ –±–∞–∑–∞...');
        await uploadPriceBaseFiles(projectId, priceBaseFiles);
      }

      // Upload Template file
      if (templateFile.length > 0) {
        setUploadProgress('–ö–∞—á–≤–∞–Ω–µ –Ω–∞ —à–∞–±–ª–æ–Ω...');
        await uploadTemplateFile(projectId, templateFile[0]);
      }

      setUploadProgress('–ì–æ—Ç–æ–≤–æ!');
      
      // Fetch updated project info
      await getProject(projectId);

      // Navigate to match page
      setTimeout(() => navigate('/match'), 500);
    } catch (err) {
      console.error('Upload failed:', err);
      const error = err as { response?: { data?: { message?: string } } };
      setError(error.response?.data?.message || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–∞—á–≤–∞–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ');
    } finally {
      setIsUploading(false);
      setUploadProgress('');
    }
  };

  const totalFiles = kssFiles.length + ukazaniaFiles.length + priceBaseFiles.length + templateFile.length;
  const canUpload = kssFiles.length > 0 && !isUploading;

  return (
    <div className="max-w-6xl mx-auto">
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2">–ö–∞—á–≤–∞–Ω–µ –Ω–∞ –§–∞–π–ª–æ–≤–µ</h1>
        <p className="text-muted-foreground">
          –ö–∞—á–µ—Ç–µ –≤—Å–∏—á–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∏ —Ñ–∞–π–ª–æ–≤–µ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞. –ö–°–° —Ñ–∞–π–ª–æ–≤–µ—Ç–µ —Å–∞ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∏.
        </p>
      </div>

      {/* Upload Zones Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <UploadZone
          title="–ö–°–° –§–∞–π–ª–æ–≤–µ"
          description="Excel —Ñ–∞–π–ª–æ–≤–µ (.xlsx) —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–∏ —Å–º–µ—Ç–∫–∏"
          accept=".xlsx"
          maxFiles={25}
          files={kssFiles}
          onFilesChange={setKssFiles}
          icon="üìä"
        />

        <UploadZone
          title="–£–∫–∞–∑–∞–Ω–∏—è"
          description="Word —Ñ–∞–π–ª–æ–≤–µ (.docx) —Å –ø—Ä–æ–≥–Ω–æ–∑–∏ –ø–æ –µ—Ç–∞–ø–∏"
          accept=".docx"
          maxFiles={2}
          files={ukazaniaFiles}
          onFilesChange={setUkazaniaFiles}
          icon="üìù"
        />

        <UploadZone
          title="–¶–µ–Ω–æ–≤–∞ –ë–∞–∑–∞"
          description="Excel —Ñ–∞–π–ª–æ–≤–µ (.xlsx) —Å –µ–¥–∏–Ω–∏—á–Ω–∏ —Ü–µ–Ω–∏"
          accept=".xlsx"
          maxFiles={2}
          files={priceBaseFiles}
          onFilesChange={setPriceBaseFiles}
          icon="üí∞"
        />

        <UploadZone
          title="–®–∞–±–ª–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª–Ω–æ)"
          description="Excel —Ñ–∞–π–ª (.xlsx) —à–∞–±–ª–æ–Ω –∑–∞ –µ–∫—Å–ø–æ—Ä—Ç"
          accept=".xlsx"
          maxFiles={1}
          files={templateFile}
          onFilesChange={setTemplateFile}
          icon="üìÑ"
        />
      </div>

      {/* Error Display */}
      {error && (
        <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-4 flex items-start gap-3 mb-6">
          <AlertCircle className="w-5 h-5 text-destructive flex-shrink-0 mt-0.5" />
          <div className="flex-1">
            <p className="font-medium text-destructive">–ì—Ä–µ—à–∫–∞</p>
            <p className="text-sm text-destructive/80 mt-1">{error}</p>
          </div>
        </div>
      )}

      {/* Progress Display */}
      {isUploading && (
        <div className="bg-primary/10 border border-primary/20 rounded-lg p-4 flex items-center gap-3 mb-6">
          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-primary" />
          <p className="text-sm font-medium">{uploadProgress}</p>
        </div>
      )}

      {/* Summary Card */}
      <div className="bg-muted/50 rounded-lg p-4 mb-6">
        <h3 className="font-medium mb-2">–†–µ–∑—é–º–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div>
            <p className="text-muted-foreground">–ö–°–° —Ñ–∞–π–ª–æ–≤–µ</p>
            <p className="font-semibold">{kssFiles.length} / 25</p>
          </div>
          <div>
            <p className="text-muted-foreground">–£–∫–∞–∑–∞–Ω–∏—è</p>
            <p className="font-semibold">{ukazaniaFiles.length} / 2</p>
          </div>
          <div>
            <p className="text-muted-foreground">–¶–µ–Ω–æ–≤–∞ –±–∞–∑–∞</p>
            <p className="font-semibold">{priceBaseFiles.length} / 2</p>
          </div>
          <div>
            <p className="text-muted-foreground">–®–∞–±–ª–æ–Ω</p>
            <p className="font-semibold">{templateFile.length} / 1</p>
          </div>
        </div>
        <div className="mt-3 pt-3 border-t">
          <p className="text-sm">
            <span className="font-medium">–û–±—â–æ —Ñ–∞–π–ª–æ–≤–µ:</span> {totalFiles}
          </p>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex justify-between">
        <button
          onClick={() => navigate('/')}
          className="px-4 py-2 border rounded-md hover:bg-muted transition-colors"
          disabled={isUploading}
        >
          –ù–∞–∑–∞–¥
        </button>

        <button
          onClick={handleUploadAll}
          disabled={!canUpload}
          className="px-6 py-2 bg-primary text-primary-foreground rounded-md font-medium hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center gap-2"
        >
          {isUploading ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
              –ö–∞—á–≤–∞–Ω–µ...
            </>
          ) : (
            <>
              <CheckCircle className="w-4 h-4" />
              –ö–∞—á–∏ —Ñ–∞–π–ª–æ–≤–µ –∏ –ø—Ä–æ–¥—ä–ª–∂–∏
            </>
          )}
        </button>
      </div>

      {/* Info Section */}
      <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-4">
        <h3 className="font-medium text-blue-900 mb-2">‚ÑπÔ∏è –í–∞–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <ul className="text-sm text-blue-800 space-y-1 list-disc list-inside">
          <li>–ö–°–° —Ñ–∞–π–ª–æ–≤–µ—Ç–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞—Ç –∫–æ–ª–æ–Ω–∏: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ú—è—Ä–∫–∞, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ï—Ç–∞–ø</li>
          <li>–£–∫–∞–∑–∞–Ω–∏—è—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –ø–æ –µ—Ç–∞–ø–∏</li>
          <li>–¶–µ–Ω–æ–≤–∞—Ç–∞ –±–∞–∑–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å—ä–¥—ä—Ä–∂–∞: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ú—è—Ä–∫–∞, –ï–¥–∏–Ω–∏—á–Ω–∞ —Ü–µ–Ω–∞</li>
          <li>–í—Å–∏—á–∫–∏ —Ñ–∞–π–ª–æ–≤–µ —Å–µ –ø–∞—Ä—Å–≤–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –∫–∞—á–≤–∞–Ω–µ</li>
          <li>–°–ª–µ–¥ –∫–∞—á–≤–∞–Ω–µ—Ç–æ —â–µ –ø—Ä–µ–º–∏–Ω–µ—Ç–µ –∫—ä–º –ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Å—ä–ø–æ—Å—Ç–∞–≤—è–Ω–∏—è—Ç–∞</li>
        </ul>
      </div>
    </div>
  );
}

